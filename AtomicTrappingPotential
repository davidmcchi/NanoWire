#Pulled from NanoWireConstruct3D.py
#!/usr/bin/env python

import numpy as np
import copy

##########################
# Basic Geometric Objects
##########################

class cylinder():
	def __init__(self):
		self.axis = np.array([0.0,1.0,0.0])
		self.height = 1.0
		self.radius = 1.0
		self.material = "Ag"
		self.center = np.array([0.0,0.0,0.0])

	def summary(self):
		objype = "type\tcylinder"
		cent = "center\t%s" % ",".join([str(x) for x in self.center])
		rad = "radius\t%f" % self.radius
		hght = "height\t%f" % self.height
		mat = "material\t%s" % self.material
		ax = "axis\t%s" % ",".join([str(x) for x in self.axis])
		return [objype,cent,rad,hght,ax,mat]

class sphere():
	def __init__(self):
		self.center = np.array([0.0,0.0,0.0])
		self.material = "Ag"
		self.radius = 1.0

	def summary(self):
		objype = "type\tsphere"
		cent = "center\t%s" % ",".join([str(x) for x in self.center])
		rad = "radius\t%f" % self.radius
		mat = "material\t%s" % self.material
		return [objype,cent,rad,mat]

class block():
	def __init__(self):
		self.size = np.array([1.0,1.0,1.0])
		self.material = "Ag"
		self.center = np.array([0.0,0.0,0.0])

	def summary(self):
		objype = "type\tblock"
		cent = "center\t%s" % ",".join([str(x) for x in self.center])
		sz = "size\t%s" % ",".join([str(x) for x in self.size])
		mat = "material\t%s" % self.material
		return [objype,cent,sz,mat]

############################
# Derived Geometric Objects
############################

class nanoshell():
	def __init__(self):
# Define Objects
		self.S1 = sphere()
		self.S2 = sphere()
# Sphere 1 parameters
		self.S1.material = 3.9 #Dielectric constant for SiO2
		self.S1.center = np.array([0.0,0.0])
		self.S1radius = 13.0
# Sphere 2 parameters
		self.S2.center = np.array([0.0,0.0])
		self.S2.material = "Ag"
		self.S2radius = 15.0

	def summary(self):
		return [self.S2.summary(),self.S1.summary()]

##################
# Main Code
##################

#Base Parameters, 1.0 unit = 100.0 nm
CellX = 650.0
CellY = 400.0
#resolution start with 1nm

OBJS = []

#Create first nano shell object
Shell1 = nanoshell()
Shell1.S1.radius = 13.0
Shell1.S2.radius = 15.0
Shell1.S1.center = np.array([-240.0,0.0])
Shell1.S2.center = np.array([-240.0,0.0])
OBJS.append(Shell1)

#Create 8 copies of nano shell, append to OBJS
for x in range(1,9):
	newShell = copy.deepcopy(Shell1)
	newShell.S1.center = newShell.S2.center = newShell.S1.center + np.array([x*60.0,0])
	OBJS.append(newShell)

#Define slab
# class slab():
# 	def __init__(self):
# 		self.size = np.array([550.0,100.0])
# 		self.material = "Ag"
# 		self.center = np.array([0.0,-50.0])

# 	def summary(self):
# 		objype = "type\tblock"
# 		cent = "center\t%s" % ",".join([str(x) for x in self.center])
# 		sz = "size\t%s" % ",".join([str(x) for x in self.size])
# 		mat = "material\t%s" % self.material
# 		return [objype,cent,sz,mat]

#Print all parameters
num = 1
for obj in OBJS:
	print("##OBJ%i" % num)
	sumObj = obj.summary()
	if len(sumObj) == 1:
		print("\n".join(sumObj))
		print("##ENDOBJ%i" % num)
		n += 1
	else:
		first = True
		for item in sumObj:
			if not first:
				print("##OBJ%i" % num)
			print("\n".join(item))
			print("##ENDOBJ%i" % num)
			num += 1
			first = False

slab          = block()
slab.size     = np.array([550.0,100.0])
slab.material = "Ag"
slab.center   = np.array([0.0,-50.0])

OBJS.append(slab)
print("##OBJ%i" % num)
print("\n".join(slab.summary()))
print("##ENDOBJ%i" % num)
num += 1

# #Title and printing
# t = OBJ.set_title(r'$\mathbf{|\vec{E}|^2/ |\vec E_0|^2}$', fontweight='bold',fontsize=12)
# t.set_y(1.04) 							#Offset the title so it doesn't overlap with the plot
# im = OBJ.imshow(data, cmap="jet",origin='lower',extent=[xmin,xmax,ymin,ymax])
# im.set_clim(cmin,cmax) 		#Set the colorbar limits
# cbar = figure.colorbar(im, ticks = cticks)
# cbar.ax.set_yticklabels(cticks,fontweight='bold',fontsize=12)

# plt.show()
